name: Terraform Plan

on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        required: false
        default: tf
      operation:
        type: string
        required: false
        default: Common
    secrets:
      aws-id:
        required: true
      aws-secret:
        required: true
      git-read-key:
        required: true

jobs:
  plan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-id }}
          aws-secret-access-key: ${{ secrets.aws-secret }}
          aws-region: eu-central-1

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.git-read-key }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        working-directory: tf

      - name: Terraform Init
        id: init
        run: terraform init
        continue-on-error: true
        working-directory: ${{ inputs.working-directory }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true
        working-directory: ${{ inputs.working-directory }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=plan.tmp
        continue-on-error: true
        working-directory: ${{ inputs.working-directory }}

      - name: Terraform Show Plan
        id: show-plan
        run: |
          terraform show plan.tmp -no-color >${GITHUB_WORKSPACE}/plan.out
        continue-on-error: true
        working-directory: ${{ inputs.working-directory }}

      - name: Install fs module
        run: npm install fs

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { readFile } = require("fs/promises")
            const planOut = await readFile('plan.out')
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('|${{ inputs.operation }}| Terraform Format and Style')
            })
            
            const plan = "terraform\n" + planOut.length > 63000 ? `${planOut.substring(0, 63000)}...` : planOut

            const output = `#### |${{ inputs.operation }}| Terraform Format and Style: \`${{ steps.fmt.outcome }}\` ${{ steps.fmt.outcome == 'Success' && '✅' || '❌'}}
            #### Terraform Initialization: \`${{ steps.init.outcome }}\` ${{ steps.init.outcome == 'Success' && '✅' || '❌'}}
            #### Terraform Validation: \`${{ steps.validate.outcome }}\` ${{ steps.validate.outcome == 'Success' && '✅' || '❌'}}
            #### Terraform Plan: \`${{ steps.plan.outcome }}\` ${{ steps.plan.outcome == 'Success' && '✅' || '❌'}}

            <details><summary>⏩⏩⏩ Show Plan ⏪⏪⏪</summary>

            \`\`\`${plan}\`\`\`

            </details>`;
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Check on failures
        if: steps.fmt.outcome != 'success' || steps.init.outcome != 'success' || steps.validate.outcome != 'success' || steps.plan.outcome != 'success'
        run: |
          echo "#### Terraform Format and Style: ${{ steps.fmt.outcome == 'Success' && '✅' || '❌' }}"
          echo "#### Terraform Initialization: ${{ steps.init.outcome == 'Success' && '✅' || '❌' }}"
          echo "#### Terraform Validation: ${{ steps.validate.outcome == 'Success' && '✅' || '❌' }}"
          echo "#### Terraform Plan: ${{ steps.plan.outcome == 'Success' && '✅' || '❌' }}"
          exit 1
